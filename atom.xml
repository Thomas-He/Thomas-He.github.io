<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas-He</title>
  
  <subtitle>Keep it simple, stupid!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-26T12:26:11.981Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Thomas-He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何通俗易懂地理解红黑树</title>
    <link href="http://example.com/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://example.com/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2021-09-26T04:14:57.000Z</published>
    <updated>2021-09-26T12:26:11.981Z</updated>
    
    <content type="html"><![CDATA[<p>红黑树想必大家都不陌生，但是很多同学对它忌讳地很。在他们的刻板印象中，红黑树的红黑规则就是凭空出现的，毫无依据可言。这篇文章的目的就是打破这种刻板印象，让大家知其然也知其所以然。</p><h3 id="1-2-3-4-树"><a class="markdownIt-Anchor" href="#1-2-3-4-树"></a> 1. 2-3-4 树</h3><p>在讲红黑树之前，有必要给大家介绍一下 2-3-4 树，2-3-4 树是理解红黑树的关键。那什么是 2-3-4 树呢？如下图所示，首先 2-3-4 树是一棵查找树；其次 2-3-4 树允许 2-结点，3-结点和 4-结点的存在，这也是 2-3-4 树名字的由来。所谓 2-结点就是最多能有 2 个孩子的结点，3-结点就是最多能有 3 个孩子的结点，依此类推…</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/2-3-4-tree.png" alt="2-3-4 tree"></p><p>2-3-4 树有一个很酷的性质：在动态地添加和删除元素的时候，只要花费很小的代价就能够保持树的完美平衡。啥叫完美平衡呢？完美平衡指的是，每一条从根结点到叶子结点的路径都是一样长的。直观一点讲，就是所有的叶子结点都位于同一层上。接下来，我们就以 2-3-4 树的插入为例，讲讲 2-3-4 树如何在动态添加元素的过程中保持树的完美平衡。</p><h4 id="11-插入"><a class="markdownIt-Anchor" href="#11-插入"></a> 1.1 插入</h4><p>就以上图为例，假设我们已经有了一棵完美平衡的 2-3-4 树 (这样的假设是很合理的，因为空树和只有一个元素的 2-3-4 树都是完美平衡的)。现在我们要插入一个元素，首先我们会根据元素之间的大小关系，找到元素要插入的位置。根据插入位置的不同，我们可以分为三种情况：</p><ol><li>在 2-结点的位置插入，我们只需要将 2-结点转换成 3-结点即可。</li></ol><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/insert-2-node.jpg" alt="insert-2-node"></p><ol start="2"><li><p>在 3-结点的位置插入，我们只需要将 3-结点转换成 4-结点即可。</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/insert-3-node.jpg" alt="insert-3-node"></p></li><li><p>比较麻烦的是，如果我们在 4-结点的位置插入元素，该怎么办呢？</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/insert-4-node.jpg" alt="insert-4-node"></p><p>答案是：我们需要将 4-结点进行分裂，以腾出空间给新添加的元素，这样我们就可以像在 2-结点中一样添加元素了。具体过程如下图所示：</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/split-4-node.png" alt="split-4-node"></p><p>不过这里存在一个小问题，那就是如果父结点也是 4-结点该怎么办呢？这样我们就没办法将中间元素直接添加到父结点中了。处理这个问题主要有两种方式：</p><ul><li>自底向上：我们以同样的方式分裂父结点，如有必要，我们沿着树一直向上分裂。</li><li>自顶向下：在查找插入位置的时候，遇到 4-结点就直接分裂，这样就可以保证插入元素的结点不是 4-结点。</li></ul></li></ol><h4 id="12-生长过程"><a class="markdownIt-Anchor" href="#12-生长过程"></a> 1.2 生长过程</h4><p>接下来，我们就以一个具体的例子来看看 2-3-4 树是如何在动态地添加元素的过程中保持树的完美平衡的，这里我们采用自顶向下的方式分裂 4-结点。</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/growth-of-tree-1.jpg" alt="growth-of-tree-1"></p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/growth-of-tree-2.jpg" alt="growth-of-tree-2"></p><h4 id="13-性能分析"><a class="markdownIt-Anchor" href="#13-性能分析"></a> 1.3 性能分析</h4><p>通过上面的例子，相信你对 2-3-4 树是如何保持完美平衡的有了一定的认识了。那么接下来，我们就来分析下 2-3-4 树的性能。由于 2-3-4 树是完美平衡的，那么最坏情况下，树的高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">\log_{2}N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> (所有结点都为 2-节点)；最好情况下，树的高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>4</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">\log_{4}N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">\frac{1}{2}\log_{2}N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> (所有结点都为 4-结点)。我们可以通过一些数据更直观地感受下它的性能：100 万个元素，树的高度在 10～20 之间；10 亿个元素，树的高度在 15～30 之间。</p><p>2-3-4 树的高度为 O(lg n)，因此搜索的时间复杂度为 O(lg n)； 在添加元素和删除元素时，我们需要做些额外的操作来保持树的完美平衡，这主要是通过树的旋转操作来完成的，可以证明这些旋转操作最多为 O(lg n)，因此添加和删除的时间复杂度也为 O(lg n)。</p><p>总体来说，2-3-4 树的性能是非常不错的，搜索、添加、删除的时间复杂度都为 O(lg n)。那么我们又该如何实现 2-3-4 树呢？</p><h4 id="14-直接实现"><a class="markdownIt-Anchor" href="#14-直接实现"></a> 1.4 直接实现?</h4><p>最容易想到的方式就是：编写不同的结点类型分别代表 2-结点，3-结点和 4-结点。这样确实也能够实现，但是会带来许多麻烦：需要管理不同的结点类型；不同的结点类型之间需要相互转换；不好统一 cases。我们可以通过一段伪代码来直观地感受下这种实现方式的复杂度…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">  Node x = root;</span><br><span class="line">  <span class="keyword">while</span> (x.getTheCorrectChild(key) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      x = x.getTheCorrectChild(key);</span><br><span class="line">      <span class="keyword">if</span> (x.is4Node()) x.split();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (x.is2Node()) x.make3Node(key, value);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x.is3Node()) x.make4Node(key, value);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我们期待一种更简单的实现！</p><h3 id="2-红黑树"><a class="markdownIt-Anchor" href="#2-红黑树"></a> 2. 红黑树</h3><p>红黑树就是一种更简单的实现方式，红黑树的核心思想就是用 BST 来表示 2-3-4 树。但是 2-3-4 树有 2-结点、3-结点和 4-结点，而 BST 只有 2-结点，那我们该如何表示 3-结点和 4-结点呢？红黑树使用内部的&quot;红色边&quot;来表示 3-结点和 4-结点。如下图所示：</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/3-or-4-node.jpg" alt="3-or-4-node"></p><p>用红色边相连的我们认为是在 2-3-4 树同一个结点内。3-结点有两种表示方式，红色边可以左倾，也可以右倾；4-结点只有一种表示方式，两条红色边必须位于两边，不能位于同一侧。</p><p>但是在实现的时候，我们该如何表示这些内部的&quot;红色边&quot;呢？红黑树采用了一种巧妙的方式：在每个结点中添加了一个&quot;红/黑&quot;属性，如果该结点是&quot;红&quot;的，那么就表示该结点与父结点的边是&quot;红&quot;的。</p><p>OK，这就是红黑树，简单吧～</p><p>接下来，我们就用这样一种&quot;新&quot;的眼光重新来看下红黑树的正式定义：</p><blockquote><p>A red-black tree is a binary tree that satisfies the following <strong>red-black properties</strong>:</p><ol><li>Every node is either red or black.</li><li>The root is black.</li><li>Every leaf (NIL) is black.</li><li>If a node is red, then both its children are black.</li><li>For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</li></ol></blockquote><p>以上定义摘自 <em>Introduction To Algorithms</em>。前 3 点没什么好说的；第 4 点其实说的是，不能有两条连续的红色边，因为 4-结点的两条红色边必须位于两侧，不能位于同一边；第 5 点其实就是在说 2-3-4 树是完美平衡的。</p><p>重新审视之后，我们会发现红黑树模型其实真的很简单，完全没必要去死记硬背那些红黑性质。</p><h4 id="21-左倾红黑树"><a class="markdownIt-Anchor" href="#21-左倾红黑树"></a> 2.1 左倾红黑树</h4><p>经典的红黑树 3-结点有两种不能的表示方式，红色边可以左倾，也可以右倾，因此红黑树与 2-3-4 树之间不是一对一 的关系，如下图所示：</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/not-1-to-1-correspondence.jpg" alt="not-1-to-1-correspondence"></p><p>如果我们在红黑树的基础上，要求 3-结点的红色边必须左倾，那么红黑树与 2-3-4 树之间就是一对一的关系，如下图所示：</p><p><img src="/2021/09/26/%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E5%9C%B0%E7%90%86%E8%A7%A3%E7%BA%A2%E9%BB%91%E6%A0%91/1-to-1-correspondence.jpg" alt="1-to-1-correspondence"></p><p>这样一种新的红黑树模型，我们称之为左倾红黑树 (Left-leaning Red-Black Tree, LLRB)。</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>这篇文章主要是让大家理解红黑树模型，因此没有涉及红黑树的实现。对经典红黑树实现感兴趣的同学，可以参考 <em>Introduction To Algorithms</em> 和 jdk TreeMap 的源码。对左倾红黑树实现感兴趣的同学，可以参考 Robert Sedgewick 的 <em>Algorithms</em> 以及这本书的<a href="https://algs4.cs.princeton.edu/33balanced/RedBlackBST.java.html">配套网站</a>。</p>]]></content>
    
    
    <summary type="html">很多同学都认为红黑树的红黑规则就是凭空出现的，毫无依据可言。这篇文章提供了一种新视角，让大家可以更加直观地理解红黑树，知其然也知其所以然。</summary>
    
    
    
    <category term="Data Structure" scheme="http://example.com/categories/Data-Structure/"/>
    
    
    <category term="Data Structure" scheme="http://example.com/tags/Data-Structure/"/>
    
    <category term="Red-Black Tree" scheme="http://example.com/tags/Red-Black-Tree/"/>
    
  </entry>
  
  <entry>
    <title>EventBus</title>
    <link href="http://example.com/2021/09/25/EventBus/"/>
    <id>http://example.com/2021/09/25/EventBus/</id>
    <published>2021-09-25T09:02:01.000Z</published>
    <updated>2021-09-25T09:10:42.016Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章，我们讲了观察者模式，又称为发布-订阅模式。我们发现不管是同步阻塞的实现方式，还是异步非阻塞的实现方式，都要求 Observer 实现某个接口，这样可能会导致在重构过程中代码修改的范围过大；而且 Observable 都会持有 Observer 的集合，以便在发生某个事件的时候通知所有注册的 Observer，这样会导致 Observable 和 Observer 的耦合性过大。</p><p>那有没有一种实现方式可以像使用消息队列那样: Observable 不需要感知 Observer 的存在，当某个事件发生的时候，只需要发布该事件即可；Observer 也无需感知 Observable 的存在，它只需要订阅某个事件即可，当该事件发生的时候，它就会执行相应的动作。这种实现方式是存在的，也就是我们今天要讲的 EventBus。</p><h3 id="1-eventbus-的使用"><a class="markdownIt-Anchor" href="#1-eventbus-的使用"></a> 1. EventBus 的使用</h3><p>EventBus 类似于使用消息队列实现的发布-订阅模式。当事件源发生某事件的时候，我们可以调用 EventBus.post() 方法将该事件发布；那么所有监听这种事件类型的 EventListener 就会执行相对应的动作。</p><p>Google Guava EventBus 就是一个比较著名的 EventBus 框架。它的优点是：事件和事件监听者可以是任意的数据类型；它不仅仅支持同步阻塞模式，还支持异步非阻塞模式；易于使用。下面我们就通过一个具体的例子，来看看如何使用 Guava EventBus。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">private</span> EventBus eventBus;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      eventBus = <span class="keyword">new</span> AsyncEventBus(Executors.newFixedThreadPool(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObservers</span><span class="params">(List&lt;Object&gt; observers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object observer : observers) &#123;</span><br><span class="line">          eventBus.register(observer); <span class="comment">// register observer</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">register</span><span class="params">(String telephone, String password)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// authentication...</span></span><br><span class="line">      <span class="keyword">long</span> userId = userService.register(telephone, password);</span><br><span class="line">      eventBus.post(userId); <span class="comment">// post event</span></span><br><span class="line">      <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromotionObserver</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> PromotionService promotionService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Subscribe</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRegister</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">     promotionService.issueExperienceCash(userId); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationObserver</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> NotificationService notificationService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Subscribe</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notificate</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">      String message = ...;</span><br><span class="line">      notificationService.sendInboxMessage(userId, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们通过 EventBus.register() 来注册事件监听者，注意事件监听者可以是任意类型。然后，当事件发生的时候，通过 EventBus.post() 方法来发布事件，事件也可以是任意的类型。这样事件监听者中带有 @Subscribe 注解的方法，并且方法的参数类型与事件的类型匹配，那么该方法就会执行。</p><h3 id="2-eventbus-的原理"><a class="markdownIt-Anchor" href="#2-eventbus-的原理"></a> 2. EventBus 的原理</h3><p>接下来，我们就来看看 EventBus 框架的实现原理。首先，我们简单介绍下 Guava EventBus 框架的核心成员～</p><ul><li><p>EventBus, AsyncEventBus</p><p>EventBus 是同步阻塞模式，AsyncEventBus 是异步非阻塞模式，AsyncEventBus 继承了 EventBus。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EventBus eventBus = <span class="keyword">new</span> EvetnBus();</span><br><span class="line">EventBus eventBus = <span class="keyword">new</span> AsyncEventBus(executor);</span><br></pre></td></tr></table></figure></li><li><p>EventBus.register()</p><p>EventBus.register() 方法是用来注册事件监听者的，事件监听者可以是任意类型的对象。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>EventBus.unregister()</p><p>顾名思义，unregister() 就是用来删除事件监听者的，方法签名如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object object)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>EventBus.post()</p><p>EventBus.post() 方法是用来发布事件的，事件也可以是任意类型的对象。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object object)</span></span>;</span><br></pre></td></tr></table></figure><p>需要注意的是：事件不是发送给所有的事件监听者，而是发送给了那些可以监听该类型事件的监听者 (具体如何实现的，请继续往下看…)。</p></li><li><p>@Subscribe 注解</p><p>EventBus 通过 @Subscribe 注解来标明哪些函数是订阅消息 (事件) 的函数。如果该类的对象注册到了 EventBus，并且 EventBus 发布了与该方法的参数类型相匹配的消息，那么该方法就会得到执行。具体使用方式如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"><span class="comment">// Omit other code...</span></span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Subscribe</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(T event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>既然我们已经清楚了如何使用 Guava EventBus，那么接下来我们就来说说它的实现原理。  EventBus 框架的核心逻辑都在 register() 和 post() 两个函数当中，搞明白了它们，基本就搞明白了整个框架。</p><p>首先我们来看看 register() 函数：当调用 register() 注册对象时，register() 会扫描对象所属类中所有带有 @Subscibe 注解的方法，并把带有 @Subscribe 注解的方法和该对象封装成一个 ObserverAction，添加到注册表 (ObserverRegistry) 中。注册表其实就是一个 Map，键是事件的类型 (也就是方法参数的类型)；值是 ObserverAction 集合，也就是当该事件发生的时候，所有要执行的动作。</p><p>接下来我们来看看 post() 函数：当调用 post() 函数发布一个事件的时候，post() 函数会根据事件的类型去注册表中找到所有要执行的动作，然后通过反射执行相应的动作~</p><p>总体来说 EventBus 框架的原理还是非常简单的，清楚了原理之后，接下来我们就自己动手山寨一个 EventBus 框架。</p><h3 id="3-自己动手实现一个-eventbus-框架"><a class="markdownIt-Anchor" href="#3-自己动手实现一个-eventbus-框架"></a> 3. 自己动手实现一个 EventBus 框架</h3><p>首先，清点一下我们需要实现哪些 artifact：@Subscribe 注解，ObserverAction，ObserverRegistry，EventBus 和它的子类 AsyncEventBus。</p><h4 id="31-subscribe"><a class="markdownIt-Anchor" href="#31-subscribe"></a> 3.1 @Subscribe</h4><p>@Subscribe 是一个注解，标明该对象的哪些方法应该添加到注册表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subscribe &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32-observeraction"><a class="markdownIt-Anchor" href="#32-observeraction"></a> 3.2 ObserverAction</h4><p>ObserverAction 封装了注册的对象以及这个对象中带有 @Subscribe 注解的方法，这样做的目的是方便以后通过反射去执行方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverAction</span><span class="params">(Object target, Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method.invoke(target, event);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="33-observerregistry"><a class="markdownIt-Anchor" href="#33-observerregistry"></a> 3.3 ObserverRegistry</h4><p>ObserverRegistry 是 EventBus 框架中最复杂的一个类，几乎所有的核心逻辑都在这个类中。这个类中大量使用了反射的机制，不过总体来说代码并不难懂…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverRegistry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConcurrentMap&lt;Class&lt;?&gt;, CopyOnWriteArraySet&lt;ObserverAction&gt;&gt; registry = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object observer)</span> </span>&#123;</span><br><span class="line">        Map&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; observerActions = findAllObserverActions(observer);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; entry : observerActions.entrySet()) &#123;</span><br><span class="line">            Class&lt;?&gt; eventType = entry.getKey();</span><br><span class="line">            Collection&lt;ObserverAction&gt; eventActions = entry.getValue();</span><br><span class="line">            CopyOnWriteArraySet&lt;ObserverAction&gt; registeredEventActions = registry.get(eventType);</span><br><span class="line">            <span class="keyword">if</span> (registeredEventActions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                registry.putIfAbsent(eventType, <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;());</span><br><span class="line">                registeredEventActions = registry.get(eventType);</span><br><span class="line">            &#125;</span><br><span class="line">            registeredEventActions.addAll(eventActions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ObserverAction&gt; <span class="title">getMatchedObserverActions</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        List&lt;ObserverAction&gt; matchedObservers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Class&lt;?&gt; postedEventType = event.getClass();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, CopyOnWriteArraySet&lt;ObserverAction&gt;&gt; entry : registry.entrySet()) &#123;</span><br><span class="line">            Class&lt;?&gt; eventType = entry.getKey();</span><br><span class="line">            Collection&lt;ObserverAction&gt; eventActions = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (eventType.isAssignableFrom(postedEventType)) &#123; <span class="comment">// if matches then add all actions</span></span><br><span class="line">                matchedObservers.addAll(eventActions);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matchedObservers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; findAllObserverActions(Object observer) &#123;</span><br><span class="line">        Map&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; observerActions = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Class&lt;?&gt; clazz = observer.getClass();</span><br><span class="line">        <span class="keyword">for</span> (Method method : getAnnotatedMethods(clazz)) &#123;</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!observerActions.containsKey(eventType)) &#123;</span><br><span class="line">                observerActions.put(eventType, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            observerActions.get(eventType).add(<span class="keyword">new</span> ObserverAction(observer, method));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> observerActions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Method&gt; <span class="title">getAnnotatedMethods</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        List&lt;Method&gt; annotatedMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Method method : clazz.getDeclaredMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (parameterTypes.length != <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Subscriber methods must have exactly 1 parameter.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                annotatedMethods.add(method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> annotatedMethods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得一提的是，我们使用了 CopyOnWriteArraySet 和 ConcurrentHashMap 来提升并发环境下的读写性能。</p><h4 id="34-eventbus-asynceventbus"><a class="markdownIt-Anchor" href="#34-eventbus-asynceventbus"></a> 3.4 EventBus &amp; AsyncEventBus</h4><p>EventBus 是同步阻塞的，AsyncEventBus 是异步非阻塞的，AsyncEventBus 继承了 EventBus。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObserverRegistry registry = <span class="keyword">new</span> ObserverRegistry();</span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Executors.newFixedThreadPool(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">EventBus</span><span class="params">(Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        registry.register(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span> <span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        List&lt;ObserverAction&gt; matchedObserverActions = registry.getMatchedObserverActions(event);</span><br><span class="line">        <span class="keyword">for</span> (ObserverAction action : matchedObserverActions) &#123;</span><br><span class="line">            executor.execute(() -&gt; action.execute(event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了代码可能你会有这样的疑惑，为什么同步阻塞式的 EventBus 需要持有 Executor 对象呢？之所以这样，是为了和异步非阻塞的 AsyncEventBus 统一代码逻辑，做到代码复用。在构建 EventBus 对象的时候，传入的 Executor 参数是 Executors.newFixedThreadPool(1)，也就是说 EventBus 其实还是单线程的。</p><p>AsyncEventBus 只需要继承 EventBus 即可，它的实现非常简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncEventBus</span> <span class="keyword">extends</span> <span class="title">EventBus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncEventBus</span><span class="params">(Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(executor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>在这篇文章中，我们仿照 Google Guava EventBus，用了不到 200 行代码就山寨了一个 EventBus 框架。在功能上它和 Google Guava EventBus 几乎没什么区别；但是在性能上，它们还是有很大的差距的，Google Guava EventBus 在实现细节方面做了很多的优化。感兴趣的同学可以去看看 <a href="https://github.com/google/guava">Google Guava EventBus 的源码</a>。</p>]]></content>
    
    
    <summary type="html">在这篇文章中，我们会仿照 Google Guava EventBus，自己动手实现一个 EventBus 框架。</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="Google Guava" scheme="http://example.com/categories/Java/Google-Guava/"/>
    
    
    <category term="Google Guava" scheme="http://example.com/tags/Google-Guava/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——观察者模式</title>
    <link href="http://example.com/2021/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-09-24T22:04:21.000Z</published>
    <updated>2021-09-24T22:08:42.230Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式是在开发过程中用得比较多的一种模式。根据应用场景的不同，观察者模式有不同的实现方式：同步阻塞式，异步非阻塞式，甚至可以利用消息队列实现跨进程的观察者模式。</p><h3 id="1-观察者模式的原理"><a class="markdownIt-Anchor" href="#1-观察者模式的原理"></a> 1. 观察者模式的原理</h3><p>观察者模式也被称为<strong>发布订阅模式</strong> (Publish-Subscribe Design Pattern)，<em>Design Patterns</em> 一书中对它的描述如下：</p><blockquote><p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p></blockquote><h3 id="2-观察者模式的实现"><a class="markdownIt-Anchor" href="#2-观察者模式的实现"></a> 2. 观察者模式的实现</h3><p>观察者模式根据应用场景的不同有多种不同的实现方式，首先我们来看最经典的一种实现方式——同步阻塞式。</p><h4 id="21-同步阻塞式"><a class="markdownIt-Anchor" href="#21-同步阻塞式"></a> 2.1 同步阻塞式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Message message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Message message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer : observers) &#123;</span><br><span class="line">            observer.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步阻塞式的代码非常简单，我就不做过多的解释了。同步阻塞式的观察者模式有一个很明显的弊端：Subject 必须遍历所有的 Observer，并依次调用 Observer.update() 方法，等所有的 Observer.update() 方法结束后，Subject.notifyObservers() 方法才会返回。如果某个 Observer 的 update() 方法比较耗时，又或者 Subject 注册了很多 Observer，那么 notifyObservers() 的性能将十分堪忧。异步非阻塞的实现方式可以很好地解决这个问题。</p><h4 id="22-异步非阻塞式"><a class="markdownIt-Anchor" href="#22-异步非阻塞式"></a> 2.2 异步非阻塞式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Message message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Message message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer : observers) &#123;</span><br><span class="line">            executor.execute(() -&gt; observer.update(message));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步非阻塞方式和同步阻塞方式的代码非常相似，唯一的不同就是我们将通知 Observer 的任务下发给了 Executor。</p><h4 id="23-跨进程方式"><a class="markdownIt-Anchor" href="#23-跨进程方式"></a> 2.3 跨进程方式</h4><p>不管是同步阻塞方式，还是异步非阻塞方式，Subject 和 Observer 都位于同一个进程内。不过，我们可以利用 RPC 或者是消息队列实现跨进程的观察者模式。基于 RPC 的方式比较直接，我们只需要在 Observer.update() 方法中调用 RPC 接口即可。</p><p>基于消息队列的方式相对来说会更加优雅，也更加常见。它将 Subject 和 Observer 解耦地更加彻底：Subject 完全感知不到 Observer，它只需要向消息队列中添加消息；Observer 也完全感知不到 Subject，它只需要从消息队列中读取消息。</p><h3 id="3-观察者模式的应用"><a class="markdownIt-Anchor" href="#3-观察者模式的应用"></a> 3. 观察者模式的应用</h3><p>观察者模式的应用场景非常广泛，它可以应用于代码的解耦，又或者是架构的设计，甚至是一些产品的设计都有观察者模式的影子，比如：邮件订阅，RSS Feeds…</p><p>接下来，我们以两个具体的例子来讲讲观察者模式的应用。</p><h4 id="31-注册通知"><a class="markdownIt-Anchor" href="#31-注册通知"></a> 3.1 注册通知</h4><p>在一些金融系统中，我们往往会有这样的需求：用户注册成功之后，我们会赠送用户一些体验金。这个需求不难实现，大致逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">private</span> PromotionService promotionService;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">register</span><span class="params">(String telephone, String password)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// authentication...</span></span><br><span class="line">      <span class="keyword">long</span> userId = userService.register(telephone, password);</span><br><span class="line">      promotionService.issueExperienceCash(userId);</span><br><span class="line">      <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserController.register() 接口做了两件事情：注册和发放体验金。这违反了单一职责原则，但是如果没有扩展和修改的需求，这样做也是无可厚非的。</p><p>但是需求往往是变动的，比如：现在不发体验金了，改发优惠券，并且还需要发送一封&quot;欢迎新用户&quot;的站内信。随着需求越来越多，UserController.register() 的逻辑会越来越复杂，代码的可读性和可维护性会越来越差…</p><p>这时候，观察者模式就可以派上用场了。我们可以利用观察者模式对代码进行重构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterObserver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">afterRegister</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromotionRegisterObserver</span> <span class="keyword">implements</span> <span class="title">RegisterObserver</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> PromotionService promotionService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRegister</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">      promotionService.issueExperienceCash(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationRegisterObserver</span> <span class="keyword">implements</span> <span class="title">RegisterObserver</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> NotificationService notificationService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRegister</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">      String message = ...</span><br><span class="line">      notificatinService.sendInboxMessage(userId, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">private</span> List&lt;RegisterObserver&gt; observers;</span><br><span class="line">  <span class="keyword">private</span> Executor executor;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(RegisterObserver observer)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">register</span><span class="params">(String telephone, String password)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// authentication...</span></span><br><span class="line">      <span class="keyword">long</span> userId = userService.register(telephone, password);</span><br><span class="line">      <span class="keyword">for</span> (RegisterObserver observer : observers) &#123;</span><br><span class="line">          executor.execute(() -&gt; observer.afterRegister(userId));</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码重构之后，如果有新的需求，比如：用户注册成功之后，需要推送用户信息给大数据征信系统。UserController.register() 接口是不需要发生任何改动的，我们只需要添加一个 RegisterObserver 的实现类，并且将它注册到 UserController 中即可。</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>在这篇文章中，我们主要讲了观察者模式的原理，它的实现方式，以及通过一个具体的案例展示了如何应用观察者模式去重构已有的代码。</p>]]></content>
    
    
    <summary type="html">这篇文章介绍了观察者模式的原理，它的实现方式，以及通过一个具体的案例展示了如何通过观察者模式去重构已有的代码。</summary>
    
    
    
    <category term="Design Pattern" scheme="http://example.com/categories/Design-Pattern/"/>
    
    
    <category term="Design Pattern" scheme="http://example.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——责任链模式</title>
    <link href="http://example.com/2021/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-09-24T21:51:40.000Z</published>
    <updated>2021-09-24T21:59:44.596Z</updated>
    
    <content type="html"><![CDATA[<p>在 web 开发中，有这样一个经典的场景：Sender 将 request 发送给 Receiver 处理，Receiver 在真正调用 service() 方法之前，经常需要进行各种校验，比如：鉴权，限流，敏感词过滤…当然我们可以在 Receiver 中用大量的 if 语句进行校验，但是这样代码的耦合度太高，不利于灵活地组合各种校验条件，也不利于扩展。</p><p>那遇到这样的场景，我们该如何设计呢？这就是我们今天要讲的——责任链模式(Chain of Responsibility)。</p><h3 id="1-责任链模式的原理"><a class="markdownIt-Anchor" href="#1-责任链模式的原理"></a> 1. 责任链模式的原理</h3><p>在上面的场景中，Receiver 类太过庞大和复杂，因此我们必须对它进行拆分，拆分成多个 Handler 对象，并将这多个 Handler 对象组成一条链，依次处理 request。其中每个 Handler 只专注于一个功能，比如说有鉴权的 Handler，有限流的 Handler，有敏感词过滤的 Handler…</p><p>这样做不仅仅符合高内聚、低耦合的设计原则；在框架的开发中，我们还可以利用责任链模式为框架提供扩展点，比如 Servlet 中的 Filter，Spring 中的 Interceptor 等。</p><h3 id="2-责任链模式的实现"><a class="markdownIt-Anchor" href="#2-责任链模式的实现"></a> 2. 责任链模式的实现</h3><p>责任链模式的实现灵活多变，根据组成链的方式不同，我们大体可以分为两类：数组方式和链表方式。</p><h4 id="21-数组方式"><a class="markdownIt-Anchor" href="#21-数组方式"></a> 2.1 数组方式</h4><p>数组方式比较简单直接，我们将所有的 Handler 都放入数组中，然后遍历数组，若其中某个 Handler 能处理这个请求，处理完成后直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(Request req)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerA</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// handle req...</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerB</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// handle req...</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerChain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Handler&gt; handlers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHandler</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">        handlers.add(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Handler h : handlers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h.handle(req)) <span class="keyword">return</span> ; <span class="comment">// if handled,then return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-链表方式"><a class="markdownIt-Anchor" href="#22-链表方式"></a> 2.2 链表方式</h4><p>链表方式比数组方式复杂一点，我们首先定义了一个抽象类 Handler, 它有一个成员变量 successor, 我们正是通过 successor 将所有的 Handler 连成一条链表。我们在 handle() 方法中运用了模版方法模式，这样做可以将模版代码抽象出来放在父类中，而子类只需要专注于自己的业务逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> handled = doHandle(req);</span><br><span class="line">        <span class="comment">// if not handled and successor is not null, then pass req to succssor</span></span><br><span class="line">        <span class="keyword">if</span> (!handled &amp;&amp; successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handle(req);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">doHandle</span><span class="params">(Request req)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerA</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">doHandle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// handle req</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerB</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">doHandle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// handle req</span></span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerChain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler head;</span><br><span class="line">    <span class="keyword">private</span> Handler tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHandler</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = handler;</span><br><span class="line">            tail = handler;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.setSuccessor(handler);</span><br><span class="line">        tail = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="keyword">null</span>) head.handle(req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-责任链模式的应用"><a class="markdownIt-Anchor" href="#3-责任链模式的应用"></a> 3. 责任链模式的应用</h3><p>在许多框架中都有责任链模式的身影，接下来我们以 Servlet 中的 Filter 和 Spring 中的 Interceptor 为例，来具体讲讲在框架中责任链模式是如何设计的。</p><h4 id="31-servlet-filter"><a class="markdownIt-Anchor" href="#31-servlet-filter"></a> 3.1 Servlet Filter</h4><p>在 Servlet Filter 中我们不仅仅可以对 request 进行拦截，我们还可以对 response 进行拦截，也就是说 Servlet Filter 可以双向拦截。不难看出，我们前面实现的责任链模式都是单向的，只能拦截 request。那么 Servlet Filter 是如何实现双向拦截的呢？为了更好地理解 Servlet Filter 设计的精妙之处，首先来看看我们是怎么使用 Filter 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// interceptor request...</span></span><br><span class="line">    <span class="comment">// if not handled, let chain do the next filter processing</span></span><br><span class="line">    <span class="keyword">if</span> (!handled) chain.doFilter(request, response);</span><br><span class="line">    <span class="comment">// interceptor response...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet 是 Java EE 的一个规范，FilterChain 是其中一个接口，由具体的 web 容器提供实现类。ApplicationFilterChain 就是 Tomcat 提供的实现类。将 ApplicationFilterChain 进行简化和抽象，我们就可以得到下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> pos = <span class="number">0</span>; <span class="comment">// the position of current processing filter</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n; <span class="comment">// the number of filters </span></span><br><span class="line">  <span class="keyword">private</span> Filter[] filters;</span><br><span class="line">  <span class="keyword">private</span> Servlet servlet;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">      Filter filter = filters[pos++];</span><br><span class="line">      filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// request passed all filters, let servlet service the request.</span></span><br><span class="line">      servlet.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet Filter 设计的精妙之处在于：Filter.doFilter() 方法和 FilterChain.doFilter() 方法组合在一起可以形成一个递归调用，并且利用了递归调用栈 FILO 的特性，实现了双向拦截的效果。(PS: 如果您还看不出怎么形成的递归，请务必将 Filter.doFilter() 的代码在 FilterChain.doFilter() 中展开…)</p><h4 id="32-spring-interceptor"><a class="markdownIt-Anchor" href="#32-spring-interceptor"></a> 3.2 Spring Interceptor</h4><p>Spring Interceptor 和 Servlet Filter 的功能非常类似，过滤器和拦截器本质上是没有区别的。要说它们有什么不同的话，那就是它们的作用时机不同了。</p><p><img src="/2021/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/interceptor.png" alt="interceptor"></p><p>我们还是和 Servlet Filter 一样，首先来看看我们是怎样使用 Spring Interceptor 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> permit = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// intercept request</span></span><br><span class="line">    <span class="keyword">return</span> permit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// intercept response</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// always execute</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 Servlet Filter 相比，Spring Interceptor 更加精细化了。Servlet Filter 拦截请求和拦截响应的的逻辑都写在了 Filter.doFilter() 方法中。而 Spring Interceptor 将它们分别放入了 preHandle() 和 postHandle() 里，并且还提供了 afterCompletion() 方法。</p><p>接下来我们来看看 Spring Interceptor 的底层是如何实现的。HandlerExecutionChain 就是串联 Spring Interceptor 的链子。它的实现相对 Tomcat 的 ApplicationFilterChain 来说，逻辑更加清晰，不需要使用递归来实现。同样，为了更好地体现设计逻辑，我们对代码做了些简化和抽象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;HandlerInterceptor&gt; interceptorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.interceptorList.size(); i++) &#123;</span><br><span class="line">HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line">interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = <span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring 框架中，我们是利用 DispatcherServlet.doDispatch() 方法来分发请求的，它在业务逻辑代码执行的前后，分别执行了 HandlerExecutionChain 中的 applyPreHandle() 和 applyPostHandle() 方法，以此来实现双向拦截的效果。</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>这篇文章主要讲了与责任链设计模式相关的内容：为什么要使用责任链模式；责任链模式的原理；责任链模式的实现方式；以及责任链模式在具体框架中的应用。</p>]]></content>
    
    
    <summary type="html">这篇文章介绍了责任链模式的原理，它的实现方式，以及分析了 Servlet Filter 和 Spring Interceptor 是如何应用责任链模式的。</summary>
    
    
    
    <category term="Design Pattern" scheme="http://example.com/categories/Design-Pattern/"/>
    
    
    <category term="Design Pattern" scheme="http://example.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>浅析CAS</title>
    <link href="http://example.com/2021/09/08/%E6%B5%85%E6%9E%90CAS/"/>
    <id>http://example.com/2021/09/08/%E6%B5%85%E6%9E%90CAS/</id>
    <published>2021-09-08T14:44:37.000Z</published>
    <updated>2021-09-11T06:32:30.321Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章我们分析了可见性和重排序对程序正确性的影响，并且举了个计数器的例子。那是否保证了可见性，限制重排序之后，程序就不会出问题了呢？如下代码所示，我们声明 count 变量为 volatile 类型，根据 happens-before 规则中的 volatile variable rule 可知，对 count 变量的写入 happens-before 随后对 count 变量的读取。那么该程序是不是就没问题了呢？运行之后，我们发现每次的结果依然是小于等于 20000，且每次的结果都可能不一样。那么问题出在哪呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoAtomicity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start(); t2.start();</span><br><span class="line">        t1.join(); t2.join();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因是 count++ 这个操作并不是原子的，这是一个典型的 read-modify-write 操作。如果出现下图所示的调度，线程 A 和 线程 B 都对 count 进行了自增操作，但 count 的最终结果是 1，出现了更新丢失。所以仅仅保证可见性，限制重排序是不足以保证程序正确的，我们还需要保证原子性。</p><p><img src="/2021/09/08/%E6%B5%85%E6%9E%90CAS/1.png" alt="Interleaving of thread"></p><p>使用 Java 提供的内置锁，或者显示锁，我们可以很容易地把 count++ 变成原子操作，这样做在没有锁竞争，或者锁竞争程度适当的情况下，性能还是不错的 (Java 在 1.6 版本对内置锁做了很大的改善，大大提升了内置锁在没有竞争，或者竞争程度适当情况下的性能)。但若锁竞争比较激烈，那么线程将被挂起，等待被唤醒。线程调度，上下文切换等操作的开销远远大于执行 count++ 的开销，调度开销与工作开销的比值会非常高，也就是说宝贵的 CPU 资源大部分浪费在调度工作上了。</p><p>对于细粒度的操作 (比如 count++, 容器类中的大部分简单的方法等)，使用锁进行同步，在竞争激烈的情况下，性能会大打折扣。volatile 是一种更轻量级的同步机制，它在访问变量的时候不会涉及线程调度和上下文切换等操作，但是它不能保证复合操作的原子性。</p><p>那有没有一种同步机制介于这两者之间，即可以像 volatile 一样访问变量 (发生竞争的时候，线程不会被挂起)，又可以像锁一样为简单的复合操作提供原子性？幸运的是，在现代处理器中提供了这种机制。</p><h3 id="1-硬件对并发的支持"><a class="markdownIt-Anchor" href="#1-硬件对并发的支持"></a> 1. 硬件对并发的支持</h3><p>排他锁的思想比较悲观，它认为如果不上锁，就一定会发生并发问题。因此它采用一种保守的策略：不管有没有竞争，我都上锁，以防万一。这种思想适用于竞争激烈以及操作粒度大的情况。</p><p>对于细粒度的操作，有一种更好的思想，那就是乐观的思想：我们有一种侦测的手段 (冲突检查)可以侦测到在执行更新操作的时候，是否有来自其他线程的干扰。如果有，那么这个更新操作无效，并且我们可以重试 (也可以不重试)；如果没有，那么这个更新操作有效。</p><p>处理器工程师很早就意识到了这个问题，在早期的处理器中就提供了原子的 <em>test-and-set</em>, <em>fetch-and-increment</em>, <em>swap</em> 等指令。我们可以用这些指令来实现 mutexes 和一些更为复杂的并发对象 (concurrent objects)。如今，几乎所有的现代处理器都提供了更为强大的指令，比如 <em>compare-and -swap</em>, <em>load-linked/store-conditional</em>，这些指令可以提供原子的 read-modify-write 操作。</p><p>大多数处理器架构都选择提供 <em>compare-and-swap</em> (CAS) 指令，并且 Java 也是以 CAS 的形式使用这些指令的。CAS 有 3 个操作数—— 内存地址 V，期望的旧值 A，和待写入的新值 B。如果 V 的值和 A 相等，那么 CAS 会把 V 的值更新为 B，否则它什么也不做；不管哪种情况，CAS 都会返回现在 V 中的值。CAS 还有一种变种形式，叫做 <em>compare-and-set</em>，它会返回更新操作是否成功。文字描述可能比较晦涩，我们用 Java 代码来说明 CAS 的语义。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulatedCAS</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">int</span> expectedValue, <span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> oldValue = value;</span><br><span class="line">      <span class="keyword">if</span> (oldValue == expectedValue)</span><br><span class="line">          value = newValue;</span><br><span class="line">      <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expectedValue, <span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> expectedValue == compareAndSwap(expectedValue, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;             </span><br></pre></td></tr></table></figure><p>CAS 的含义是：我认为 V 现在的值应该是 A，如果是，那么将 V 的值更新为 B；如果不是，那么不修改，但是你得告诉我 V 现在的值是多少。</p><p>CAS 采用的是乐观的思想，它会尝试更新操作，并在更新的过程中检测其他线程是否修改过这个变量。当多个线程同时使用 CAS 更新一个变量的时候，只有一个线程能成功，其他线程都将失败。然而失败的线程不会被挂起，而是被告知在这次竞争中失败了。它们可以决定再次尝试，或者是执行一些恢复操作，又或者是不再尝试了。失败的线程不会被挂起，而是由程序员决定该如何处理，这就能避免由锁带来的一些问题，比如死锁和优先级反转 (不过依然存在活锁和饥饿的风险)。</p><p>在 Java 5.0 之前，我们必须编写 native 代码才能确保处理器执行 CAS 操作；Java 5.0 提供了原子变量类 (AtomicXxx)，可以让我们很方便的在 int, long 和引用类型上执行 CAS 操作；Java 9 提供了VarHandle，它可以让我们更灵活更高效地使用 CAS (这里我们不做介绍)。</p><h3 id="2-原子变量类"><a class="markdownIt-Anchor" href="#2-原子变量类"></a> 2. 原子变量类</h3><p>相对锁来说，原子变量粒度更细，量级更轻，对于构建高性能的并发程序至关重要。从某种意义上讲，原子变量就是&quot;更好的&quot;volatile 变量——它的内存语义和 volatile 一样，并且提供了一些原子的更新操作。以 AtomicInteger 为例，AtomicInteger 表示一个 int 类型的值，我们可以用 get 和 set 方法对原子变量进行读取和写入，并且这些读/写操作有着和 volatile 变量一样的内存语义 (volatile variable rule)。除此之外，它还提供了原子的 compareAndSet 方法，以及原子的算术方法，比如加法，递增，递减等。</p><p>Java 一共有 12 个原子变量类型，我们可以把它们分成四类：标量类 (scalars)，域更新器类 (field updaters)，数组类 (arrays)，和复合变量类 (compound variables)。所有这些原子变量类都支持 CAS 操作，AtomicInteger 和 AtomicLong 还支持简单的原子算数操作。</p><p>最常用的自然就是标量类，共有四种：AtomicInteger, AtomicLong, AtomicBoolean 和 AtomicReference。(我们可以将 byte, short 转换成 int, 通过 floatToIntBits 和 doubleToLongBits 将浮点数转换成 int 和 long，从而可以使用原子类的功能)。</p><p>原子数组类有三种，只支持 int[], long[] 以及引用数组。原子数组类的作用相当于把数组元素都声明为对应的标量类。比如 AtomicIntegerArray 的作用就相当于把它里面的元素都声明为了 AtomicInteger 类型。</p><p>其余的原子变量类型，我们在相应的使用场景中会做简单的介绍。</p><h4 id="21-numberrange"><a class="markdownIt-Anchor" href="#21-numberrange"></a> 2.1 NumberRange</h4><p>接下来，我们以一个简单的例子来说明下原子变量的正确使用方式。假设我们需要设计一个表示整数区间的类 NumberRange，它有两个属性 lower 和 upper，并且我们有一个约束条件：lower 必须小于等于 upper。我们很容易就写出下面的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedNumberRange</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lower;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> upper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setLower</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; upper)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;can&#x27;t set lower to &quot;</span> + i + <span class="string">&quot; &gt; upper&quot;</span>);</span><br><span class="line">        lower = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setUpper</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; lower)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;can&#x27;t set upper to &quot;</span> + i + <span class="string">&quot; &lt; lower&quot;</span>);</span><br><span class="line">        upper = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isInRange</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= lower &amp;&amp; i &lt;= upper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SynchronizedNumberRange 使用内置锁保证了数据的一致性，但它同时只允许一个线程访问该类的对象，在竞争激烈的情况下，性能会十分低下。那我们能不能够改善 SynchronizedNumberRange 的性能呢？首先，使用 volatile 是不行的，因为这里存在典型的 check-then-act 竞态条件。那我们可不可以使用原子变量呢？我们先尝试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeNumberRange</span> </span>&#123;</span><br><span class="line">    <span class="comment">// INVARIANT: lower &lt;= upper</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger lower = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger upper = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLower</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Waring -- unsafe check-then-act</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; upper.get())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;can&#x27;t set lower to &quot;</span> + i + <span class="string">&quot; &gt; upper&quot;</span>);</span><br><span class="line">        lower.set(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpper</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Warning -- unsafe check-then-act</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; lower.get()) </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;can&#x27;t set upper to &quot;</span> + i + <span class="string">&quot; &lt; lower&quot;</span>);</span><br><span class="line">        upper.set(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInRange</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= lower.get() &amp;&amp; i &lt;= upper.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，UnsafeNumberRange 依然存在 check-then-act 竞态条件，原子变量只能保证单个操作的原子性。所以 UnsafeNumberRange 是线程不安全的。</p><p>难道我们就没有其他办法了吗，只能忍受锁带来巨大的开销？既然原子变量只能保证单个变量操作的原子性，那么我们是不是可以将 NumberRange 的两个属性封装到一个对象内，然后使用 AtomicReference 对这个对象进行更新操作…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasNumberRange</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;IntPair&gt; values = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="keyword">new</span> IntPair(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// Immutable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntPair</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Invariant: lower &lt;= upper</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> lower;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> upper;</span><br><span class="line"></span><br><span class="line">        IntPair(<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">          <span class="keyword">if</span>(i &gt; j)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;violate invariant: lower &lt;= upper&quot;</span>);</span><br><span class="line">            lower = i;</span><br><span class="line">            upper = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLower</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            IntPair oldv = values.get();</span><br><span class="line">            IntPair newv = <span class="keyword">new</span> IntPair(i, oldv.upper);</span><br><span class="line">            <span class="keyword">if</span> (values.compareAndSet(oldv, newv))</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpper</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            IntPair oldv = values.get();</span><br><span class="line">            IntPair newv = <span class="keyword">new</span> IntPair(oldv.lower, i);</span><br><span class="line">            <span class="keyword">if</span> (values.compareAndSet(oldv, newv))</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInRange</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        IntPair val = values.get();</span><br><span class="line">        <span class="keyword">return</span> i &gt;= val.lower &amp;&amp; i &lt;= val.upper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当多个变量组成的不变性条件 (invariant) 的时候，我们往往将这多个变量封装到一个对象内，然后采用自旋 CAS 的方式给它们一起赋值，以此来保证多个赋值操作的原子性，如 CasNumberRange 中所做的一样。</p><h3 id="3-非阻塞算法"><a class="markdownIt-Anchor" href="#3-非阻塞算法"></a> 3. 非阻塞算法</h3><p>基于锁的算法可能会发生各种活跃性故障。如果一个线程在持有锁的期间，由于阻塞 I/O，内存页缺失，或者由于其他原因而导致延迟执行，那么很可能其他线程也不能够执行。如果在某种算法中，一个线程的失败或者挂起不会引起另一个线程的失败或者挂起，那么这种算法我们就称之为非阻塞算法。如果在算法中，只使用 CAS 来协调线程之间的操作，那么这个算法一定是非阻塞算法。我们已经看到了一个非阻塞算法：CasNumberRange。从中我们可以发现实现非阻塞算法的关键在于：如何将原子修改操作的范围缩小到单个变量上，同时还保持了数据的一致性。</p><p>接下来，我们以简单的数据结构——栈和队列为例，窥探下非阻塞算法是如何应用到数据结构上的。</p><h4 id="31-非阻塞栈"><a class="markdownIt-Anchor" href="#31-非阻塞栈"></a> 3.1 非阻塞栈</h4><p>栈是最简单的链式结构：每个元素只被一个引用指向，并且它最多指向另外一个元素。栈最重要的两个操作——push 和 pop——都只需要原子地修改 top 指针即可，因此非阻塞栈的实现是比较简单的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentStack</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    AtomicReference&lt;Node&lt;E&gt;&gt; top = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">      </span><br><span class="line">        Node (E item) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span> <span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; newTop = <span class="keyword">new</span> Node&lt;&gt;(item);</span><br><span class="line">        Node&lt;E&gt; oldTop;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            oldTop = top.get();</span><br><span class="line">            newTop.next = oldTop;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!top.compareAndSet(oldTop, newTop));</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; newTop;</span><br><span class="line">        Node&lt;E&gt; oldTop;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            oldTop = top.get();</span><br><span class="line">            <span class="keyword">if</span> (oldTop == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            newTop = oldTop.next;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!top.compareAndSet(oldTop, newTop));</span><br><span class="line">        <span class="keyword">return</span> oldTop.item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32-非阻塞队列"><a class="markdownIt-Anchor" href="#32-非阻塞队列"></a> 3.2 非阻塞队列</h4><p>队列比栈要复杂，因为队列必须维持头尾两个指针，并且有两个引用指向尾节点——尾节点前一个节点的 next 指针，以及 tail 指针。如果我们在队尾插入一个元素，那么我们必须保证这两个指针被原子地更新。否则的话，如果一个指针更新成功了，另一个指针更新失败了，那么队列就会处于一个不一致的状态；又或者是两个指针都更新成功了，但是在这两个指针更新的过程中，另一个线程也更新了 next 指针或着 tail 指针，队列同样会处于一个不一致的状态。并且尾节点前一个节点的 next 指针和 tail 指针好像也没什么不变性条件，把它们封装成一个对象看起来有些不伦不类。这样看起来 put 操作好像是没法通过 CAS 来完成了。</p><p>我们需要一些特别的技巧。如果一个操作有多个步骤，并且我们有办法判断这个操作是否处于中间状态。那么我们就可以采用这样一种策略：当线程 B 到达的时候，如果它发现这个操作正处于中间状态，那么说明有某个线程 (线程 A) 正在执行这个操作，因此线程 B 知道它不能立即执行这个操作。它需要等待 (不断地检查是否处于中间状态) 线程 A 的完成。这样两个线程就不会发生干扰了。</p><p>这种方法可行，但是它和锁没有多大的区别 (其实这就是自旋锁的原理)，它使得多个线程必须串行地访问数据结构。如果在这个过程中，线程 A 更新失败了，导致数据结构处于中间状态，那么其它线程都将无法执行这个操作。要想设计一个非阻塞算法，我们必须保证一个线程的失败，不会妨碍其它线程的执行。</p><p>第二种策略是：当线程 B 到达的时候，如果它发现线程 A 正在修改数据结构，并且如果线程 B 能够知道线程 A 执行到了哪一步，那么线程 B 可以&quot;帮助&quot;线程 A 完成它的更新操作，然后再执行自己的操作，而不是等待线程 A 完成。当线程 A 恢复后试图完成操作，它会发现有其它线程已经帮助它完成了。第二种策略需要比第一种策略知道更多的信息，线程不仅需要知道操作是否处于中间状态，还需要知道这个操作已经执行到了哪一步。</p><p>Michael-Scott 在 1996 年提出的非阻塞链接队列算法采用的正是第二种策略。下面代码中给出了它的插入方法的实现。在该算法中，我们包含了一个哨兵 (sentinel)，又称为哑节点 (dummy node)，这样做的目的避免一些边界条件的检查，简化代码的实现。head 指针永远指向哑节点，tail 指针有 3 种状态：指向哑节点 (此时队列为空)，指向最后一个节点，指向倒数第二个节点 (当有其它线程在插入元素时)。第一种和第二种情况，队列处于正常状态 (quiescent state)，第三种情况，队列处于中间状态 (intermediate state)。下图展示的是在正常状态下，包含两个元素的队列。</p><p><img src="/2021/09/08/%E6%B5%85%E6%9E%90CAS/2.png" alt="quiscent state"></p><p>当插入一个新元素的时候，我们需要更新两个指针。首先将最后一个节点的 next 指针指向新插入的节点，其次再将 tail 指针指向新插入的节点。该过程只包含两个步骤，如果我们能判断插入操作处于中间状态，那么我们也就知道它执行到哪一步了，所以关键在于如何判断插入操作是否处于中间状态。如果队列处于正常状态，那么 tail 指针指向节点的 next 域为 null；如果队列处于中间状态，那么 tail 指针指向节点的 next 域不等于 null。因此，任意一个线程都可以通过检查 tail.next 获取队列当前状态。如果当前处于中间状态，那么该线程可以将 tail 指针往前移动一个位置，从而帮助另一个线程完成插入操作。下图展示的是处于中间状态下的队列。</p><p><img src="/2021/09/08/%E6%B5%85%E6%9E%90CAS/3.png" alt="intermediate state"></p><p>LinkQueue 在插入新元素之前，首先检查队列是否处于中间状态 (步骤 A)。如果是，那么有另一个线程正在插入元素 (处于步骤 C 和 D 之间)，该线程会通过 CAS 尝试帮它完成操作 (步骤 B)，并重新尝试插入新元素。如果队列处于正常状态，那么该线程会通过 CAS 尝试把新节点链接到队列的末尾 (步骤 C)，如果失败，线程会重新尝试插入新元素；如果步骤 C 成功了，那么我们就认为插入生效了。将 tail 指针移动到新插入的元素 (步骤 D) 被认为是一个&quot;清理操作&quot;，因为它即可以由插入该元素的线程完成，也可以由其它线程完成，因此不管步骤 D 有没有成功，方法都返回 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;E&gt; dummy = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Node&lt;E&gt;&gt; head = <span class="keyword">new</span> AtomicReference&lt;&gt;(dummy);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Node&lt;E&gt;&gt; tail = <span class="keyword">new</span> AtomicReference&lt;&gt;(dummy);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> &lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> E item;</span><br><span class="line">        <span class="keyword">final</span> AtomicReference&lt;Node&lt;E&gt;&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(E item, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = <span class="keyword">new</span> AtomicReference&lt;&gt;(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">put</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node(item, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; curTail = tail.get();</span><br><span class="line">            Node&lt;E&gt; tailNext = curTail.next.get();</span><br><span class="line">            <span class="keyword">if</span> (curTail == tail.get()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tailNext != <span class="keyword">null</span>) &#123;<span class="comment">//--A--</span></span><br><span class="line">                    <span class="comment">// Queue in intermediate state, advance tail</span></span><br><span class="line">                    tail.compareAndSet(curTail, tailNext);<span class="comment">//--B--</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// In quiescent state, try inserting new node</span></span><br><span class="line">                    <span class="keyword">if</span> (curTail.next.compareAndSet(<span class="keyword">null</span>, newNode)) &#123;<span class="comment">//--C--</span></span><br><span class="line">                        <span class="comment">// Insertion succeed, try advancing tail</span></span><br><span class="line">                        tail.compareAndSet(curTail, newNode); <span class="comment">//--D--</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-cas-的缺点"><a class="markdownIt-Anchor" href="#4-cas-的缺点"></a> 4. CAS 的缺点</h3><p>虽然在绝大多数时候，CAS 都比锁的性能好，但 CAS 不是解决并发问题的银弹，它也有缺点：</p><ol><li>CAS 只能确保单个变量的修改操作是原子的。虽然我们可以利用聪明的算法 (比如LinkedQueue 中使用的算法)，使多个变量的修改操作达到原子性的效果，但这是算法的功劳。</li><li>程序员必须处理竞争问题。一般来说我们有三种策略：重试，回退，放弃。</li><li>在竞争极端激烈的情况下，CAS 和锁相比，性能可能更加低下。如果我们以自旋重试的方式使用 CAS，那么在竞争异常激烈时候，大部分线程都在自旋重试，消耗着 CPU 时钟和内存总线的同步通信量 (synchronization traffic)。这时候，更好的选择是把这些线程挂起，将资源让给其他线程使用。</li><li>ABA 问题。CAS 的语义是：V 的值是否仍然为 A，如果是那么把 V 的值更新为 B。在大多数情况下，这就足够了；然而，在某些特殊情况下，我们需要知道 “至从上次观察到 V 的值为 A 以来，V 的值是否发生了变化”。在某些算法中，如果 V 的值由 A 变成 B，再由 B 变成 A，仍然被认为是发生了变化，这个问题称之为 ABA 问题。一种简单的解决方案是：我们给值贴上一个版本号，更新的时候，不仅更新 V 的值，也更新版本号。在 Java 中提供了 AtomicStampedReference 以及 AtomicMarkableReference 来支持这种解决方案，AtomicStampedReference 可以原子地更新 “引用-整数&quot;二元组，因此我们可以为每个值贴上一个版本号；AtomicMarkableReference 可以原子地更新&quot;引用-布尔值&quot;二元组，这样我们就可以将某些对象标记为&quot;已删除”，而不将它们从数据结构中剔除。</li></ol><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>这篇文章首先通过一个具体的例子，说明了原子操作对编写正确并发程序的重要性。计算机底层硬件通过一些并发原语 (比如 CAS) 提供了一些最基本的原子操作。Java 通过原子变量和 VarHandle 将这些并发原语统一以 CAS 的形式暴露给程序员使用。</p><p>我们可以通过 CAS 实现各种非阻塞算法，构建各种并发对象，从而为应用程序提供更好的可伸缩性 (scalability)。非阻塞算法被广泛地应用在操作系统和 JVM 中，用来实现线程和进程调度，垃圾回收，锁和各种并发数据结构。JVM 从一个版本升级到另一个版本，并发性能的提升主要来自于对非阻塞算法的使用。</p>]]></content>
    
    
    <summary type="html">这篇博文主要介绍了和CAS相关的内容：底层硬件对并发的支持，Java中的原子变量类，以及非阻塞算法。</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="concurrent programming" scheme="http://example.com/categories/Java/concurrent-programming/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="concurrent programming" scheme="http://example.com/tags/concurrent-programming/"/>
    
    <category term="CAS" scheme="http://example.com/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>从Java程序员的角度谈谈JMM</title>
    <link href="http://example.com/2021/09/07/%E4%BB%8EJava%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%A7%92%E5%BA%A6%E8%B0%88%E8%B0%88JMM/"/>
    <id>http://example.com/2021/09/07/%E4%BB%8EJava%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%A7%92%E5%BA%A6%E8%B0%88%E8%B0%88JMM/</id>
    <published>2021-09-07T11:02:12.000Z</published>
    <updated>2021-09-11T06:31:31.034Z</updated>
    
    <content type="html"><![CDATA[<p>Java 内存模型 (Java Memory Model, JMM) 很复杂，它涉及Java同步机制、编译器、JVM、CPU架构等多方面的内容。不同类别的程序员对 JMM 的关注重点自然是不一样的，这篇文章写的是一个普通 Java 程序员对 JMM 的理解。</p><h3 id="1-为什么需要jmm"><a class="markdownIt-Anchor" href="#1-为什么需要jmm"></a> 1. 为什么需要JMM?</h3><h4 id="11-平台内存模型"><a class="markdownIt-Anchor" href="#11-平台内存模型"></a> 1.1 平台内存模型</h4><p>在共享内存的多处理器体系结构中，每个处理器都有自己的缓存，并且定期地与主内存进行同步。但是不同的处理器架构提供了不同程度的缓存一致性 (cache coherence)。关于缓存一致性，我们可以设想两个极端：一个是允许不同的处理器在任意时刻对内存中同一个变量的观察值可以不相同；另一个极端是确保每一个处理器在任一时刻都知道其余的处理器都在做些什么。显然，这两种极端情况都很不理想，绝大多数平台提供的缓存一致性都位于这两者之间，并且还提供了一些指令来加强缓存和主内存的协同，这些指令我们称之为内存屏障 (memory barriers or fences)。</p><p>为了使 Java 程序员不需要关心不同架构之间内存模型上的差异，Java 提出了自己的内存模型。JVM 通过在合适的位置插入内存屏障，弥补了 JMM 和底层平台内存模型之间的差异。</p><h4 id="12-可见性"><a class="markdownIt-Anchor" href="#12-可见性"></a> 1.2 可见性</h4><p>假如一个线程 A 为变量 variable 赋值<code>variable = 3</code>，在缺少同步的情况下，另一个线程 B 可能无法立即看到线程 A 的操作，甚至是永远也看不到。原因有许多，比如缓存未刷新到主内存，又或者是线程 B 关于 variable 的缓存未失效。举个例子，来看看可见性对程序正确性的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoVisibility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start(); t2.start();</span><br><span class="line">        t1.join(); t2.join();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序很简单，我们创建了两个线程，每个线程的任务都是对 count 自增 10000 次。我们期望最终的结果是 20000，但是很可惜，每次运行的结果都小于等于 20000，并且运行的结果都可能不同。其原因是，在缺乏同步的情况下，线程 t1 对变量 count 的操作可能对线程 t2 是不可见的，同理，线程 t2 对变量 count 的操作可能对线程 t1 也是不可见的。(在这个例子中，原子性也是导致结果小于 20000 的一个原因，这里暂时不讨论)。</p><p>为了避免这样的问题发生，在 Java 语法层面上，我们需要使用正确的同步机制；JVM 会根据 JMM 定义的规则在正确的位置上插入相关平台的内存屏障，以此来保证变量的可见性。</p><h4 id="13-重排序"><a class="markdownIt-Anchor" href="#13-重排序"></a> 1.3 重排序</h4><p>为了充分利用多处理器的运算能力，Java 语言规范只要求 JVM 实现线程内串行语义 (within-thread as-if-serial semantics)，也就是说只要在该线程内程序的最终结果与串行执行的结果一致就可以了。这就给编译器，运行时以及 CPU 提供了很大的优化空间。但在其他线程看起来，程序可能就完全是乱序执行的。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PossibleReordering</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">1</span>;</span><br><span class="line">            x = b;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread (() -&gt; &#123;</span><br><span class="line">            b = <span class="number">1</span>;</span><br><span class="line">            y = a;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        t1.start(); t2.start();</span><br><span class="line">        t1.join();  t2.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;(&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易想到这个程序可能会输出 (1, 0)，(0, 1) 或者 (1, 1)：t2 执行完后 t1 才开始执行，t1 执行完后 t2 才开始执行，或者是 t1 和 t2 交替执行。但奇怪的是, PossibleReordering 还可能输出 (0, 0)! 原因可能有以下两个：</p><ol><li>线程内执行的代码之间没有数据依赖性，因此它们可以乱序执行。</li><li>线程内的代码是顺序执行的，但是缓存刷新到主内存的时序与写入缓存的时序相反。</li></ol><p>不管是哪种原因导致的，我们都把这种现象称为重排序。</p><p>重排序可能会影响程序的正确性，因此，我们必须通过同步机制限制编译器，运行时和 CPU 对指令进行重排序。JVM 会根据 JMM 定义的规则在正确的位置上插入平台相关的内存屏障，以此来限制指令的重排序。</p><h3 id="2-java内存模型简介"><a class="markdownIt-Anchor" href="#2-java内存模型简介"></a> 2. Java内存模型简介</h3><p>JMM 制定了一组确保可见性，限制重排序的规则。这组规则定义了操作之间一种称为 happens-before 的偏序关系。操作包括：对变量的读/写操作，监视器的加锁/释放锁，以及线程的启动和join等。要想执行操作 B 的线程能够看到操作 A 的结果 (无论 A 和 B 是否在同一个线程中执行)，那么 A 必须 happens-before B。如果两个操作之间没有 happens-before 关系，那么 JVM 可以随意地对他们进行重排序。</p><p><strong>Happens-before 规则：</strong></p><ul><li><strong>Program order rule.</strong>  在单个线程内，按照程序控制流程的顺序，书写在前面的操作 happens-before  书写在后面的操作。</li><li><strong>Monitor lock rule.</strong> 一个 unlock 操作 happens-before 后面对同一个锁的 lock 操作。</li><li><strong>Volatile variable rule.</strong> 对一个 volatile 变量的写操作 happens-before 后面对这个变量的读操作。</li><li><strong>Thread start rule.</strong> 对一个线程对象调用 Thread.start 方法 happens-before 该线程对象中的每一个操作。</li><li><strong>Thread termination rule.</strong> 线程 A 的所有操作都 happens-before 线程 B 对线程 A 的终止检测操作，也就是说线程 B 检测到线程 A 已经终止了，比如 Thread.join 成功返回，或者 Thread.isAlive 返回 false.</li><li><strong>Interruption rule.</strong> 线程 A 对线程 B 的中断操作 (Thread.interrupt) happens-before 线程 B 检测到中断发生 (可能抛出中断异常，Thread.isInterrupted 和 Thread.interrupted 返回 true)。</li><li><strong>Finalizer rule.</strong> 一个对象的初始化完成 (构造函数执行结束) happens-before 它的 Object.finalizer 方法的开始。</li><li><strong>Transitivity.</strong> 如果操作 A happens-before 操作 B，操作 B happens-before 操作 C，那么操作 A happens-before  操作 C。</li></ul><p>下面我们以 Monitor lock rule 规则为例，解释下 happens-before 到底是怎样一种关系。如果所示，线程 A 和 线程 B 使用锁 M 进行同步，线程 A 释放锁之后，线程随后获取到了锁。那么线程 A 在释放锁之前的所有操作对线程 B 都是可见的，并且在线程 B 看来线程 A 中释放锁之前的操作都是按程序顺序执行的，也就是说 happens-before 规则不仅仅保证了可见性，也限制了重排序。线程 A 释放之后的操作与线程 B 获取锁的操作没有 happens-before 关系，也就是说线程 A 释放锁之后的操作对线程 B 来说可能是不可见的，也可能在线程 B 看来是乱序执行的。</p><p><img src="/2021/09/07/%E4%BB%8EJava%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%A7%92%E5%BA%A6%E8%B0%88%E8%B0%88JMM/1.png" alt="Illustration of happens-before in the Java Memory Model"></p><h3 id="3-对象发布"><a class="markdownIt-Anchor" href="#3-对象发布"></a> 3. 对象发布</h3><h4 id="31-不安全的发布"><a class="markdownIt-Anchor" href="#31-不安全的发布"></a> 3.1 不安全的发布</h4><p>当缺少 happens-before 关系时，就可能出现重排序问题，这就解释了为什么在没有充分同步的情况下发布一个对象会导致另一个线程看到一个部分构造的对象 (partially constructed object). 我们以一个经典的例子——延迟初始化，来说明这个问题。</p><p>初看起来，这个程序好像只存在 check-then-act 竞态条件问题。假设所有的 Resource 对象都是一样的，并且我们也不在乎创建多个 Resource 对象。UnsafeLazyInitialization 依然是不安全的，因为另一个线程可能看到一个部分构造的 Resource 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeLazyInitialization</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Resource resource;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (resource == <span class="keyword">null</span>)</span><br><span class="line">          resource = <span class="keyword">new</span> Resource(); <span class="comment">// unsafe publication</span></span><br><span class="line">      <span class="keyword">return</span> resource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化一个对象时，需要写入多个变量，给对象的属性赋初始值；发布一个引用也需要写入一个变量，即把新对象的地址值赋值给引用。如果我们无法确保发布引用 happens-before 另一个线程加载该引用，那么在另一个线程看来，给对象属性进行初始化和给引用变量赋值可能是乱序执行的。也就是说，另一个线程可能看到引用的最新值，但看到的对象属性值却是过时的——即一个部分构造的对象。</p><p>假设线程 A 是第一个调用 getInstance 的线程，它看到 resource 为 null，因此将实例化一个 Resource 对象，并用 resource 去引用这个新对象。随后，线程 B 调用 getInstance，它可能看到 resource 的值非空，因此使用这个已经&quot;构造好&quot;的 Resource 实例，但线程 B 可能看到的只是一个被部分构造的实例——并且我们无法预料该实例的状态随后是否会发生变化。</p><blockquote><p>除了不可变对象之外，不安全的发布是非常危险的。</p></blockquote><h4 id="32-安全的初始化模式"><a class="markdownIt-Anchor" href="#32-安全的初始化模式"></a> 3.2 安全的初始化模式</h4><p>有时候，为了提高程序的响应性，我们需要对高开销的对象进行延迟初始化。但是，我们在 UnsafeLazyInitialization 中看到了错误的延迟初始化可能会给程序带来不可预料的问题。那么怎么修复这样的问题呢？答案是，使用正确的同步机制。</p><h5 id="321-同步方法"><a class="markdownIt-Anchor" href="#321-同步方法"></a> 3.2.1 同步方法</h5><p>最简单的办法就是给 UnsafeLazyInitialization.getInstance 加上 synchronized. 但是这样的话，所有访问 getInstance 的线程只能串行执行。但是当竞争激烈的时候，这会严重影响到程序的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeLazyInitialization</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Resource resource;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Resource <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (resource == <span class="keyword">null</span>)</span><br><span class="line">          resource = <span class="keyword">new</span> Resource();</span><br><span class="line">      <span class="keyword">return</span> resource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="322-double-checked-locking"><a class="markdownIt-Anchor" href="#322-double-checked-locking"></a> 3.2.2 Double-checked locking</h5><p>可能有很多同学会觉得，除了第一次创建对象我们应该同步 (避免创建多个对象)，随后对 resource 的访问就可以不同步了 (毕竟我们只是访问数据，并未修改数据)，这种想法催生了臭名昭著的 double-checked locking 反模式。那么问题出现在哪里呢？我们一起来分析下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckedLocking</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Resource resource;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (resource == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (DoubleCheckedLocking.class) &#123;</span><br><span class="line">              <span class="keyword">if</span> (resource == <span class="keyword">null</span>)</span><br><span class="line">                  resource = <span class="keyword">new</span> Resource();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> resource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，在没有同步的情况下，检查是否需要初始化，如果 resource 引用不为 null，就直接使用它。否则，在同步的情况下，再一次检查是否需要初始化，从而保证只有一个线程创建了 Resource 对象。这段代码的问题就出在，在常见的代码路径中 (resource 不等于 null)，对 resource 引用的访问没有同步！因此线程可能看到一个部分构造的 Resource 对象。要修复这个问题也很简单，我们只需要保证对 resource 的写入 happens-before 随后对 resource 的读取，因此，我们只需要在上述代码中将 resource 声明为 volatile 类型即可。</p><blockquote><p>尽量不要使用 double-checked locking，因为代码看起来很丑，而且晦涩难懂。</p></blockquote><h5 id="323-lazy-initialization-holder-class"><a class="markdownIt-Anchor" href="#323-lazy-initialization-holder-class"></a> 3.2.3 Lazy initialization holder class</h5><p>我们有一种更好的延迟初始化方式——<em>lazy initialization holder class</em> 模式。这种模式利用了 JVM 的一些特性：1. JVM 会延迟加载类，也就是说只有当使用到这个类的时候才会加载；2. JVM 加载类并对类进行初始化的过程是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceHolder</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Resource resource = <span class="keyword">new</span> Resource();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ResourceHolder.resource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程第一次调用 ResourceFactory.getInstance 方法时，JVM 会加载和初始化 ResourceHolder，在初始化的过程中会创建 Resource 实例。JVM 对类进行初始化的时候会获取一把锁，随后每个线程都会获取这把锁以确保这个类已经被加载，因此在静态初始化期间，对内存的写入操作对所有线程都是可见的。正是因为这个原因，lazy initialization holder class 模式不再需要额外的同步机制。</p><h3 id="4-initialization-safety"><a class="markdownIt-Anchor" href="#4-initialization-safety"></a> 4. Initialization safety</h3><p>我们知道不可变对象的状态是不能被修改的，因此它们天然是线程安全的对象，也就是说我们没必要对不可变对象进行同步。经过前面的讨论，我们知道在没有充分同步机制的情况下，对象的发布是不安全的，其他线程可能看到部分构造的对象。因此，我们需要额外的机制来保证，正确构造的不可变对象 (没有 this 逸出) 即使被不安全的发布，也能安全地被线程共用。</p><p>这种机制就是 <em>initialization safety</em>。Initilizaiton safety 可以保证，对一个正确构造的对象，不管该对象是不是被安全地发布，所有线程都能看到由构造函数给 final 域设置的初始值。并且那些从 final 域可达的变量 (比如 final 数组中的元素，或者是 final HashMap 中的键值对) 同样对所有线程都是可见的。</p><p>这意味着，下面代码中的 SafeStates 可以安全地发布，即使是通过 UnsafeLazyInitialization 中的方式发布，也没有任何问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeStates</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; states;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SafeStates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      states = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      states.put(<span class="string">&quot;alaska&quot;</span>, <span class="string">&quot;AK&quot;</span>);</span><br><span class="line">      states.put(<span class="string">&quot;alabama&quot;</span>, <span class="string">&quot;AL&quot;</span>);</span><br><span class="line">      ...</span><br><span class="line">        states.put(<span class="string">&quot;wyoming&quot;</span>, <span class="string">&quot;WY&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getAbbreviation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> states.get(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Initializaiton safety 有很多限制。</p><ol><li>对象必须被正确构建，也就是说在构造函数中没有发生 this 逸出。否则，initializaition safety 将失效。</li><li>Initialization safety 只能保证 final 域以及从 final 域可达变量构造完成时的可见性，也就是说所有线程都能看到由构造函数给它们设置的值。如果构造完成后，这些变量发生了修改，我们仍然需要同步机制保证可见性。</li><li>Initialization safety 对那些非 final 域，以及从 final 域不可达的变量不做任何保证。</li></ol><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>这篇文章主要是围绕可见性和重排序展开的。首先介绍了在没有同步机制的情况下，可见性和重排序可能给程序带来一些千奇百怪的问题；以此引入了 Java 内存模型，Java 内存模型制定了一些规则 (happens-before)，对可见性做出了些保证，对重排序做出了些限制；然后，我们探讨了可见性和重排序对发布对象的影响，不安全地发布一个可变对象是非常危险的；最后，由于不可变对象的特殊性，我们需要一套机制——Initialization Safety，使得不可变对象即使被不安全地发布，也可以被多个线程安全的共享。</p>]]></content>
    
    
    <summary type="html">这篇博文试图从一个Java程序员的视角谈谈对JMM的理解，忽略了和JVM以及底层硬件相关的内容。</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    <category term="concurrent programming" scheme="http://example.com/categories/Java/concurrent-programming/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="JMM" scheme="http://example.com/tags/JMM/"/>
    
    <category term="concurrent programming" scheme="http://example.com/tags/concurrent-programming/"/>
    
  </entry>
  
</feed>
